basePath: /api/v2
definitions:
  swagger.ConflictResponse:
    properties:
      code:
        example: 409
        type: integer
      message:
        example: Username already exists
        type: string
    type: object
  swagger.CreateTodoResponse:
    properties:
      code:
        example: 201
        type: integer
      data:
        $ref: '#/definitions/swagger.createResponse'
      error:
        example: false
        type: boolean
      message:
        example: Successfully create
        type: string
    type: object
  swagger.DeleteResponse:
    properties:
      code:
        example: 200
        type: integer
      error:
        example: false
        type: boolean
      message:
        example: Successfully delete
        type: string
    type: object
  swagger.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: true
        type: boolean
      message:
        example: Invalid request data
        type: string
    type: object
  swagger.GetTodoResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/swagger.TodoResponse'
      error:
        example: false
        type: boolean
      message:
        example: Successfully fetch
        type: string
    type: object
  swagger.InvalidIDResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Invalid ID
        type: string
    type: object
  swagger.ListTodoResponse:
    properties:
      code:
        example: 200
        type: integer
      count:
        example: 1
        type: integer
      data:
        items:
          $ref: '#/definitions/swagger.TodoResponse'
        type: array
      error:
        example: false
        type: boolean
      limit:
        example: 20
        type: integer
      message:
        example: Successfully fetch
        type: string
      offset:
        example: 0
        type: integer
      total:
        example: 1
        type: integer
    type: object
  swagger.LoginResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/swagger.tokenResponse'
      error:
        example: false
        type: boolean
      message:
        example: Login successful
        type: string
    type: object
  swagger.NotFoundResponse:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: Todo not found
        type: string
    type: object
  swagger.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  swagger.RefreshResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/swagger.tokenResponse'
      error:
        example: false
        type: boolean
      message:
        example: Tokens refreshed
        type: string
    type: object
  swagger.ServerErrorResponse:
    properties:
      code:
        example: 500
        type: integer
      error:
        example: true
        type: boolean
      message:
        example: Something went wrong, please try again later
        type: string
    type: object
  swagger.SuccessRegisterResponse:
    properties:
      code:
        example: 201
        type: integer
      data:
        $ref: '#/definitions/swagger.UserData'
      error:
        example: false
        type: boolean
      message:
        example: User successfully created
        type: string
    type: object
  swagger.TodoRequest:
    properties:
      description:
        example: Get milk, bread, and eggs
        type: string
      due_date:
        example: "2025-04-01"
        type: string
      tags:
        example:
        - shopping
        - urgent
        items:
          type: string
        type: array
      title:
        example: Buy groceries
        type: string
    type: object
  swagger.TodoResponse:
    properties:
      description:
        example: Get milk, bread, and eggs
        type: string
      due_date:
        example: "2025-04-01"
        type: string
      id:
        example: 12
        type: integer
      tags:
        example:
        - shopping
        - urgent
        items:
          type: string
        type: array
      title:
        example: Buy groceries
        type: string
    type: object
  swagger.UnauthorizedResponse:
    properties:
      code:
        example: 401
        type: integer
      error:
        example: true
        type: boolean
      message:
        example: Invalid credentials
        type: string
    type: object
  swagger.UpdateResponse:
    properties:
      code:
        example: 200
        type: integer
      error:
        example: false
        type: boolean
      message:
        example: Successfully update
        type: string
    type: object
  swagger.UserData:
    properties:
      username:
        example: john_doe
        type: string
    type: object
  swagger.UserRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    type: object
  swagger.createResponse:
    properties:
      id:
        example: 12
        type: integer
    type: object
  swagger.tokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI5NzU2MjgsImlkIjoiMTE3YzA4Y2EtZWEzNS00MWEyLWI4MDYtM2M5MmRjNTliMzhlIn0.cJ7xWY_V5dkIxrHfcPub--kUWZP4i2ky1nZDGkPL_BI
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDM1NzIxMzcsImlkIjoiODE4YmRmNGMtMGI5NC00ZGNiLTk2YmUtMTJhMzFmMDczYWMyIn0.5WCp11fVMXRKMzCzQvltEAC9sN_16u3AtUrMH7Z5JwI
        type: string
    type: object
info:
  contact: {}
  description: This is a simple Todo API with authentication.
  title: Todo API
  version: "2.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens.
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/swagger.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/swagger.LoginResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes tokens using a valid refresh token.
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/swagger.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed
          schema:
            $ref: '#/definitions/swagger.RefreshResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
      summary: Refresh access and refresh tokens
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided username and password.
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/swagger.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/swagger.SuccessRegisterResponse'
        "400":
          description: Invalid request data or validation error
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/swagger.ConflictResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /todos:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of todos for the authenticated user
        with optional filters.
      parameters:
      - default: 20
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Filter by due date (YYYY-MM-DD)
        in: query
        name: due_date
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Todos successfully retrieved
          schema:
            $ref: '#/definitions/swagger.ListTodoResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
        "500":
          description: Something went wrong, please try again later
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all todos
      tags:
      - todo
    post:
      consumes:
      - application/json
      description: Creates a new todo for the authenticated user.
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/swagger.TodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Todo successfully created
          schema:
            $ref: '#/definitions/swagger.CreateTodoResponse'
        "400":
          description: Invalid request data or validation error
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a todo
      tags:
      - todo
    put:
      consumes:
      - application/json
      description: Updates an existing todo for the authenticated user.
      parameters:
      - description: Updated todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/swagger.TodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Todo successfully updated
          schema:
            $ref: '#/definitions/swagger.UpdateResponse'
        "400":
          description: Invalid request data or validation error
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/swagger.NotFoundResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a todo
      tags:
      - todo
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a todo by its ID for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully delete
          schema:
            $ref: '#/definitions/swagger.DeleteResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/swagger.InvalidIDResponse'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/swagger.NotFoundResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a todo
      tags:
      - todo
    get:
      consumes:
      - application/json
      description: Retrieves a todo by its ID for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully create
          schema:
            $ref: '#/definitions/swagger.GetTodoResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/swagger.InvalidIDResponse'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/swagger.UnauthorizedResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/swagger.NotFoundResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/swagger.ServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get
      tags:
      - todo
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
