basePath: /api/v2
definitions:
  auth.refreshRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDM1NzIxMzcsImlkIjoiODE4YmRmNGMtMGI5NC00ZGNiLTk2YmUtMTJhMzFmMDczYWMyIn0.5WCp11fVMXRKMzCzQvltEAC9sN_16u3AtUrMH7Z5JwI
        type: string
    type: object
  auth.tokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI5NzU2MjgsImlkIjoiMTE3YzA4Y2EtZWEzNS00MWEyLWI4MDYtM2M5MmRjNTliMzhlIn0.cJ7xWY_V5dkIxrHfcPub--kUWZP4i2ky1nZDGkPL_BI
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDM1NzIxMzcsImlkIjoiODE4YmRmNGMtMGI5NC00ZGNiLTk2YmUtMTJhMzFmMDczYWMyIn0.5WCp11fVMXRKMzCzQvltEAC9sN_16u3AtUrMH7Z5JwI
        type: string
    type: object
  entity.Date:
    properties:
      time.Time:
        type: string
    type: object
  entity.ListResponse-entity_Todo:
    properties:
      code:
        type: integer
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/entity.Todo'
        type: array
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  entity.Response-auth_tokenResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/auth.tokenResponse'
      message:
        type: string
    type: object
  entity.Response-entity_Todo:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/entity.Todo'
      message:
        type: string
    type: object
  entity.Response-map_string_string:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/map_string_string'
      message:
        type: string
    type: object
  entity.Response-string:
    properties:
      code:
        type: integer
      data:
        type: string
      message:
        type: string
    type: object
  entity.Response-todo_createResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/todo.createResponse'
      message:
        type: string
    type: object
  entity.Response-todo_emptyResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/todo.emptyResponse'
      message:
        type: string
    type: object
  entity.Todo:
    properties:
      description:
        type: string
      due_date:
        $ref: '#/definitions/entity.Date'
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        minLength: 3
        type: string
    required:
    - description
    - due_date
    - tags
    - title
    type: object
  entity.UserLogin:
    properties:
      password:
        example: password123
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 20
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  map_string_string:
    additionalProperties:
      type: string
    type: object
  todo.createResponse:
    properties:
      id:
        example: 12
        type: integer
    type: object
  todo.emptyResponse:
    type: object
info:
  contact: {}
  description: This is a simple Todo API with authentication.
  title: Todo API
  version: "2.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens.
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/entity.Response-auth_tokenResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes tokens using a valid refresh token.
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/auth.refreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed
          schema:
            $ref: '#/definitions/entity.Response-auth_tokenResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      summary: Refresh access and refresh tokens
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided username and password.
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully created
          schema:
            $ref: '#/definitions/entity.Response-map_string_string'
        "400":
          description: Invalid request data or validation error
          schema:
            $ref: '#/definitions/entity.Response-string'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      summary: Register a new user
      tags:
      - auth
  /todos:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of todos for the authenticated user
        with optional filters.
      parameters:
      - default: 20
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Filter by due date (YYYY-MM-DD)
        in: query
        name: due_date
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Todos successfully retrieved
          schema:
            $ref: '#/definitions/entity.ListResponse-entity_Todo'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Something went wrong, please try again later
          schema:
            $ref: '#/definitions/entity.Response-string'
      security:
      - BearerAuth: []
      summary: Get all todos
      tags:
      - todo
    post:
      consumes:
      - application/json
      description: Creates a new todo for the authenticated user.
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/entity.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: Todo successfully created
          schema:
            $ref: '#/definitions/entity.Response-todo_createResponse'
        "400":
          description: Invalid request data or validation error
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      security:
      - BearerAuth: []
      summary: Create a todo
      tags:
      - todo
    put:
      consumes:
      - application/json
      description: Updates an existing todo for the authenticated user.
      parameters:
      - description: Updated todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/entity.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: Todo successfully updated
          schema:
            $ref: '#/definitions/entity.Response-todo_emptyResponse'
        "400":
          description: Invalid request data or validation error
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/entity.Response-string'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      security:
      - BearerAuth: []
      summary: Update a todo
      tags:
      - todo
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a todo by its ID for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully delete
          schema:
            $ref: '#/definitions/entity.Response-todo_emptyResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/entity.Response-string'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      security:
      - BearerAuth: []
      summary: Delete a todo
      tags:
      - todo
    get:
      consumes:
      - application/json
      description: Retrieves a todo by its ID for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully create
          schema:
            $ref: '#/definitions/entity.Response-entity_Todo'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/entity.Response-string'
        "401":
          description: User not authenticated or invalid token
          schema:
            $ref: '#/definitions/entity.Response-string'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/entity.Response-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response-string'
      security:
      - BearerAuth: []
      summary: Get
      tags:
      - todo
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
