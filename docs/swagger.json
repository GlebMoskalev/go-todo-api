{
    "swagger": "2.0",
    "info": {
        "description": "This is a simple Todo API with authentication.",
        "title": "Todo API",
        "contact": {},
        "version": "2.0"
    },
    "basePath": "/api/v2",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/swagger.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/swagger.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes tokens using a valid refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access and refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens refreshed",
                        "schema": {
                            "$ref": "#/definitions/swagger.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/swagger.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user with the provided username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/swagger.SuccessRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or validation error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Username already exists",
                        "schema": {
                            "$ref": "#/definitions/swagger.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/todos": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of todos for the authenticated user with optional filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todo"
                ],
                "summary": "Get all todos",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by due date (YYYY-MM-DD)",
                        "name": "due_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by tags (comma-separated)",
                        "name": "tags",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Todos successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/entity.ListResponse-entity_Todo"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or invalid token",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "500": {
                        "description": "Something went wrong, please try again later",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing todo for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todo"
                ],
                "summary": "Update a todo",
                "parameters": [
                    {
                        "description": "Updated todo data",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Todo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Todo successfully updated",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-todo_emptyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or validation error",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or invalid token",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "404": {
                        "description": "Todo not found",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new todo for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todo"
                ],
                "summary": "Create a todo",
                "parameters": [
                    {
                        "description": "Todo data",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Todo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Todo successfully created",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-todo_createResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or validation error",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or invalid token",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    }
                }
            }
        },
        "/todos/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a todo by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todo"
                ],
                "summary": "Get",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully create",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-entity_Todo"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or invalid token",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "404": {
                        "description": "Todo not found",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a todo by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todo"
                ],
                "summary": "Delete a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully delete",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-todo_emptyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or invalid token",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "404": {
                        "description": "Todo not found",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Response-string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Date": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "entity.ListResponse-entity_Todo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Todo"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "entity.Response-entity_Todo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/entity.Todo"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.Response-string": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.Response-todo_createResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/todo.createResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.Response-todo_emptyResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/todo.emptyResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.Todo": {
            "type": "object",
            "required": [
                "description",
                "due_date",
                "tags",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "due_date": {
                    "$ref": "#/definitions/entity.Date"
                },
                "id": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "swagger.ConflictResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 409
                },
                "message": {
                    "type": "string",
                    "example": "Username already exists"
                }
            }
        },
        "swagger.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request data"
                }
            }
        },
        "swagger.RefreshRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "swagger.ServerErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "Something went wrong, please try again later"
                }
            }
        },
        "swagger.SuccessRegisterResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/swagger.UserData"
                },
                "message": {
                    "type": "string",
                    "example": "User successfully created"
                }
            }
        },
        "swagger.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDI5NzU2MjgsImlkIjoiMTE3YzA4Y2EtZWEzNS00MWEyLWI4MDYtM2M5MmRjNTliMzhlIn0.cJ7xWY_V5dkIxrHfcPub--kUWZP4i2ky1nZDGkPL_BI"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDM1NzIxMzcsImlkIjoiODE4YmRmNGMtMGI5NC00ZGNiLTk2YmUtMTJhMzFmMDczYWMyIn0.5WCp11fVMXRKMzCzQvltEAC9sN_16u3AtUrMH7Z5JwI"
                }
            }
        },
        "swagger.UnauthorizedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Invalid credentials"
                }
            }
        },
        "swagger.UserData": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "swagger.UserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "todo.createResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "todo.emptyResponse": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}