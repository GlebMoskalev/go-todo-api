// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/GlebMoskalev/go-todo-api/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userID, todo
func (_m *TodoService) Create(ctx context.Context, userID uuid.UUID, todo entity.Todo) (int, error) {
	ret := _m.Called(ctx, userID, todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Todo) (int, error)); ok {
		return rf(ctx, userID, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Todo) int); ok {
		r0 = rf(ctx, userID, todo)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Todo) error); ok {
		r1 = rf(ctx, userID, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, userID, id
func (_m *TodoService) Delete(ctx context.Context, userID uuid.UUID, id int) error {
	ret := _m.Called(ctx, userID, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) error); ok {
		r0 = rf(ctx, userID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userID, id
func (_m *TodoService) Get(ctx context.Context, userID uuid.UUID, id int) (entity.Todo, error) {
	ret := _m.Called(ctx, userID, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) (entity.Todo, error)); ok {
		return rf(ctx, userID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) entity.Todo); ok {
		r0 = rf(ctx, userID, id)
	} else {
		r0 = ret.Get(0).(entity.Todo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = rf(ctx, userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, userID, pagination, filters
func (_m *TodoService) GetAll(ctx context.Context, userID uuid.UUID, pagination entity.Pagination, filters entity.Filters) ([]entity.Todo, int, error) {
	ret := _m.Called(ctx, userID, pagination, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Todo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Pagination, entity.Filters) ([]entity.Todo, int, error)); ok {
		return rf(ctx, userID, pagination, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Pagination, entity.Filters) []entity.Todo); ok {
		r0 = rf(ctx, userID, pagination, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Pagination, entity.Filters) int); ok {
		r1 = rf(ctx, userID, pagination, filters)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, entity.Pagination, entity.Filters) error); ok {
		r2 = rf(ctx, userID, pagination, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, userID, todo
func (_m *TodoService) Update(ctx context.Context, userID uuid.UUID, todo entity.Todo) error {
	ret := _m.Called(ctx, userID, todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Todo) error); ok {
		r0 = rf(ctx, userID, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoService creates a new instance of TodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
